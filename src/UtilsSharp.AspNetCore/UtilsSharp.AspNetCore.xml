<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UtilsSharp.AspNetCore</name>
    </assembly>
    <members>
        <member name="T:UtilsSharp.AspNetCore.AspNetCoreBuilderExtensions">
            <summary>
            AspNetCoreBuilderExtensions
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.AspNetCoreBuilderExtensions.UseAspNetCoreExtensions(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            注册AspNetCore扩展
            </summary>
            <param name="app">IApplicationBuilder</param>
            <returns></returns>
        </member>
        <member name="T:UtilsSharp.AspNetCore.AspNetCoreExtensions">
            <summary>
            AspNetCoreExtensions
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.AspNetCoreExtensions.AddAspNetCoreExtensions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加AspNetCore扩展服务
            </summary>
            <param name="services">services</param>
            <returns></returns>
        </member>
        <member name="T:UtilsSharp.AspNetCore.AspNetCoreExtensionsConfig">
            <summary>
            AspNetCoreExtensions 配置文件
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.AspNetCoreExtensionsConfig.SwaggerDocOptions">
            <summary>
            SwaggerDocOptions
            </summary>
        </member>
        <member name="T:UtilsSharp.AspNetCore.AutofacStartup">
            <summary>
            AutofacStartup
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.AutofacStartup.ConfigureContainer(Autofac.ContainerBuilder)">
            <summary>
            依赖注入映射
            </summary>
            <param name="builder">ContainerBuilder</param>
        </member>
        <member name="M:UtilsSharp.AspNetCore.AutofacStartup.Init(Autofac.ContainerBuilder)">
            <summary>
            依赖注入初始化 [Intercept(typeof(LoggerInterceptor))]
            </summary>
            <param name="builder">ContainerBuilder</param>
        </member>
        <member name="M:UtilsSharp.AspNetCore.AutofacStartup.Init``1(Autofac.ContainerBuilder)">
            <summary>
            依赖注入初始化
            </summary>
            <typeparam name="T">IInterceptor 拦截器</typeparam>
            <param name="builder">ContainerBuilder</param>
        </member>
        <member name="T:UtilsSharp.AspNetCore.Autofac.AutofacContainer">
            <summary>
            依赖注入Container
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Autofac.AutofacContainer.Current">
            <summary>
            Current
            </summary>
        </member>
        <member name="T:UtilsSharp.AspNetCore.Autofac.AutofacExtensions">
            <summary>
            AutofacExtensions
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Autofac.AutofacExtensions.UseAutofacExtensions(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            注册依赖注入
            </summary>
            <param name="app">IApplicationBuilder</param>
            <returns></returns>
        </member>
        <member name="T:UtilsSharp.AspNetCore.BaseConfig">
            <summary>
            基础配置信息
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.BaseConfig.MySqlConnection">
            <summary>
            MySql链接字符串
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.BaseConfig.MsSqlConnection">
            <summary>
            MsSql链接字符串
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.BaseConfig.ClickHouseConnection">
            <summary>
            ClickHouse链接字符串
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.BaseConfig.RedisConnection">
            <summary>
            Redis链接字符串
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.BaseConfig.RabbitMqConnection">
            <summary>
            rabbitMq链接字符串
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.BaseConfig.KafkaConnection">
            <summary>
            kafka链接字符串
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.BaseConfig.EsSettingJson">
            <summary>
            ElasticSearch EsSettingJson
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.BaseConfig.OssConfigJson">
            <summary>
            阿里云Oss OssConfigJson
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.BaseConfig.SwaggerDocOptions">
            <summary>
            swagger配置
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.BaseConfig.JwtOptions">
            <summary>
            Jwt参数
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.BaseConfig.MinWorkerThreadCount">
            <summary>
            由线程池根据需要创建的新的最小工作程序线程数
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.BaseConfig.MinCompletionPortThreadCount">
            <summary>
            由线程池根据需要创建的新的最小空闲异步 I/O 线程数
            </summary>
        </member>
        <member name="T:UtilsSharp.AspNetCore.Filter.RequestFilterAttribute">
            <summary>
            参数验签
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Filter.RequestFilterAttribute.#ctor">
            <summary>
            参数验签
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Filter.RequestFilterAttribute.#ctor(System.Int32)">
            <summary>
            参数验签
            </summary>
            <param name="expireTime">签名过期时间|单位秒，默认2分钟</param>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Filter.RequestFilterAttribute.VerifySign(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String,System.Int32)">
            <summary>
            验签
            </summary>
            <param name="headers">headers</param>
            <param name="body">body参数</param>
            <param name="expireTime">缓存过期时间</param>
            <returns></returns>
        </member>
        <member name="T:UtilsSharp.AspNetCore.Filter.ValidationActionFilter">
            <summary>
            验证入参模型过滤器
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Filter.ValidationActionFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Action执行前
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Filter.ValidationActionFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Action执行后
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:UtilsSharp.AspNetCore.Filter.ValidationExtensions">
            <summary>
             验证入参模型插件
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Filter.ValidationExtensions.AddValidationExtensions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加入参验证扩展服务
            </summary>
            <param name="services">services</param>
            <returns></returns>
        </member>
        <member name="T:UtilsSharp.AspNetCore.Interceptor.AsyncInterceptor`1">
            <summary>
            异步拦截
            </summary>
            <typeparam name="TAsyncInterceptor">异步拦截服务</typeparam>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Interceptor.AsyncInterceptor`1.#ctor(`0)">
            <summary>
            异步拦截
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Interceptor.AsyncInterceptor`1.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            拦截主方法
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="T:UtilsSharp.AspNetCore.Interceptor.InterceptorException">
            <summary>
            拦截异常信息
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Interceptor.InterceptorException.Interceptor(Castle.DynamicProxy.IInvocation,System.Exception)">
            <summary>
            拦截异常信息
            </summary>
            <param name="invocation">IInvocation</param>
            <param name="ex">Exception</param>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Interceptor.InterceptorException.InterceptorAsync``1(Castle.DynamicProxy.IInvocation,System.Exception)">
            <summary>
            拦截异常信息(异步带参数)
            </summary>
            <typeparam name="TResult">TResult</typeparam>
            <param name="invocation">IInvocation</param>
            <param name="ex">Exception</param>
            <returns></returns>
        </member>
        <member name="T:UtilsSharp.AspNetCore.Interceptor.LoggerAsyncInterceptor">
            <summary>
            日志异步拦截
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Interceptor.LoggerAsyncInterceptor.InterceptSynchronous(Castle.DynamicProxy.IInvocation)">
            <summary>
            同步方法拦截时使用
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Interceptor.LoggerAsyncInterceptor.InterceptTaskAsynchronous(Castle.DynamicProxy.IInvocation)">
            <summary>
            异步方法返回Task拦截时使用
            </summary>
            <param name="invocation">IInvocation</param>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Interceptor.LoggerAsyncInterceptor.InternalInterceptTaskAsynchronous(Castle.DynamicProxy.IInvocation)">
            <summary>
            异步方法返回Task`1拦截时使用 私有方法
            </summary>
            <param name="invocation">IInvocation</param>
            <returns></returns>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Interceptor.LoggerAsyncInterceptor.InterceptTaskAsynchronous``1(Castle.DynamicProxy.IInvocation)">
            <summary>
            异步方法返回Task`1拦截时使用
            </summary>
            <typeparam name="TResult">返回参数</typeparam>
            <param name="invocation">IInvocation</param>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Interceptor.LoggerAsyncInterceptor.InternalInterceptTaskAsynchronous``1(Castle.DynamicProxy.IInvocation)">
            <summary>
            异步方法返回Task`1拦截时使用 私有方法
            </summary>
            <typeparam name="TResult">返回参数</typeparam>
            <param name="invocation">IInvocation</param>
            <returns></returns>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Interceptor.LoggerAsyncInterceptor.InterceptValueTaskAsynchronous(Castle.DynamicProxy.IInvocation)">
            <summary>
            异步方法返回ValueTask拦截时使用
            </summary>
            <param name="invocation">IInvocation</param>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Interceptor.LoggerAsyncInterceptor.InternalInterceptValueTaskAsynchronous(Castle.DynamicProxy.IInvocation)">
            <summary>
            异步方法返回ValueTask拦截时使用 私有方法
            </summary>
            <param name="invocation">IInvocation</param>
            <returns></returns>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Interceptor.LoggerAsyncInterceptor.InterceptValueTaskAsynchronous``1(Castle.DynamicProxy.IInvocation)">
            <summary>
            异步方法返回ValueTask`1拦截时使用
            </summary>
            <typeparam name="TResult">返回参数</typeparam>
            <param name="invocation">IInvocation</param>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Interceptor.LoggerAsyncInterceptor.InternalInterceptValueTaskAsynchronous``1(Castle.DynamicProxy.IInvocation)">
            <summary>
            异步方法返回ValueTask`1拦截时使用 私有方法
            </summary>
            <typeparam name="TResult">返回参数</typeparam>
            <param name="invocation">IInvocation</param>
            <returns></returns>
        </member>
        <member name="T:UtilsSharp.AspNetCore.Interceptor.LoggerInterceptor">
            <summary>
            日志拦截器
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Interceptor.LoggerInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Aop拦截
            </summary>
        </member>
        <member name="T:UtilsSharp.AspNetCore.Jwt.JwtErrorHandlingExtensions">
            <summary>
            Jwt错误处理扩展方法
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Jwt.JwtErrorHandlingExtensions.UseJwtErrorHandlingExtensions(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Jwt错误处理扩展方法
            </summary>
        </member>
        <member name="T:UtilsSharp.AspNetCore.Jwt.JwtErrorHandlingMiddleware">
            <summary>
            Jwt错误处理插件
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Jwt.JwtErrorHandlingMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Jwt错误处理插件
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Jwt.JwtErrorHandlingMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            context
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Jwt.JwtErrorHandlingMiddleware.HandleExceptionAsync(Microsoft.AspNetCore.Http.HttpContext,System.Int32,System.String)">
            <summary>
            异常错误信息捕获，将错误信息用Json方式返回
            </summary>
        </member>
        <member name="T:UtilsSharp.AspNetCore.Jwt.JwtExtensions">
            <summary>
            JwtExtensions
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Jwt.JwtExtensions.UseJwtExtensions(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            注册Jwt
            </summary>
            <param name="app">app</param>
            <returns></returns>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Jwt.JwtExtensions.AddJwtExtensions(Microsoft.Extensions.DependencyInjection.IServiceCollection,UtilsSharp.AspNetCore.Jwt.JwtOptions)">
            <summary>
            添加Jwt扩展
            </summary>
            <param name="services">services</param>
            <param name="jwtOptions">Jwt参数</param>
            <returns></returns>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Jwt.JwtExtensions.AddJwtExtensions(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.IdentityModel.Tokens.TokenValidationParameters)">
            <summary>
            添加Jwt扩展
            </summary>
            <param name="services">services</param>
            <param name="tokenValidationParameters">token验证参数</param>
            <returns></returns>
        </member>
        <member name="T:UtilsSharp.AspNetCore.Jwt.JwtHelper">
            <summary>
            Jwt帮助类
            </summary>
        </member>
        <member name="F:UtilsSharp.AspNetCore.Jwt.JwtHelper.JwtSth">
            <summary>
            JwtSecurityTokenHandler
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Jwt.JwtHelper.Create(UtilsSharp.AspNetCore.Jwt.JwtOptions,System.Security.Claims.Claim[])">
            <summary>
            生成JwtToken
            </summary>
            <param name="jwtOptions">Jwt参数</param>
            <param name="claims">Payload||存放用户信息</param>
            <returns></returns>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Jwt.JwtHelper.GetPayload(System.String)">
            <summary>
            获取用户信息Payload内容
            </summary>
            <param name="token">token</param>
            <returns></returns>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Jwt.JwtHelper.GetTokenInfo(System.String)">
            <summary>
            获取用户信息Payload内容
            </summary>
            <param name="token">token</param>
            <returns></returns>
        </member>
        <member name="T:UtilsSharp.AspNetCore.Jwt.JwtOptions">
            <summary>
            JwtOptions
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Jwt.JwtOptions.SecretKey">
            <summary>
            私钥
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Jwt.JwtOptions.Issuer">
            <summary>
            签发人
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Jwt.JwtOptions.Audience">
            <summary>
            受众
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Jwt.JwtOptions.ExpireTime">
            <summary>
            过期时间||单位:s
            </summary>
        </member>
        <member name="T:UtilsSharp.AspNetCore.MVC.BaseAreaController">
            <summary>
            基础区域控制器
            </summary>
        </member>
        <member name="T:UtilsSharp.AspNetCore.MVC.BaseController">
            <summary>
            基础控制器
            </summary>
        </member>
        <member name="T:UtilsSharp.AspNetCore.MVC.IpController">
            <summary>
            Ip控制器
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.MVC.IpController.Client">
            <summary>
            客户端
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilsSharp.AspNetCore.MVC.IpController.Server">
            <summary>
            服务器
            </summary>
            <returns></returns>
        </member>
        <member name="T:UtilsSharp.AspNetCore.Swagger.AddRequiredHeaderParameter">
            <summary>
            添加Header配置
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Swagger.AddRequiredHeaderParameter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Apply
            </summary>
        </member>
        <member name="T:UtilsSharp.AspNetCore.Swagger.SwaggerDocOptions">
            <summary>
            SwaggerDocOptions
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Swagger.SwaggerDocOptions.Enable">
            <summary>
            生产环境可禁用Swagger
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Swagger.SwaggerDocOptions.EnableAuthorization">
            <summary>
            是否开启Authorization
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Swagger.SwaggerDocOptions.SecurityName">
            <summary>
            Authorization  SecurityName
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Swagger.SwaggerDocOptions.SecurityScheme">
            <summary>
            Authorization  SecurityScheme
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Swagger.SwaggerDocOptions.SecurityRequirement">
            <summary>
            Authorization  SecurityRequirement
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Swagger.SwaggerDocOptions.ProjectName">
            <summary>
            项目名称
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Swagger.SwaggerDocOptions.ProjectDescription">
            <summary>
            项目描述
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Swagger.SwaggerDocOptions.ProjectVersion">
            <summary>
            项目版本号
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Swagger.SwaggerDocOptions.HeaderParameters">
            <summary>
            Header默认值
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Swagger.SwaggerDocOptions.Groups">
            <summary>
            swagger分组
            </summary>
        </member>
        <member name="T:UtilsSharp.AspNetCore.Swagger.HeaderParameter">
            <summary>
            Header参数
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Swagger.HeaderParameter.Name">
            <summary>
            Header名称
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Swagger.HeaderParameter.In">
            <summary>
            参数的位置:可能的值为“query”、“header”、“path”或“cookie”。
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Swagger.HeaderParameter.Value">
            <summary>
            Header默认值
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Swagger.HeaderParameter.Description">
            <summary>
            Header描述
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Swagger.HeaderParameter.Required">
            <summary>
            是否是必须的
            </summary>
        </member>
        <member name="T:UtilsSharp.AspNetCore.Swagger.SwaggerGroup">
            <summary>
            swagger分组
            </summary>
        </member>
        <member name="P:UtilsSharp.AspNetCore.Swagger.SwaggerGroup.GroupName">
            <summary>
            分组名称
            </summary>
        </member>
        <member name="T:UtilsSharp.AspNetCore.Swagger.SwaggerExtensions">
            <summary>
            SwaggerExtensions
            </summary>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Swagger.SwaggerExtensions.UseSwaggerExtensions(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            注册swagger
            </summary>
            <param name="app">IApplicationBuilder</param>
            <returns></returns>
        </member>
        <member name="M:UtilsSharp.AspNetCore.Swagger.SwaggerExtensions.AddSwaggerExtensions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加Swagger扩展服务
            </summary>
            <param name="services">services</param>
            <returns></returns>
        </member>
    </members>
</doc>
